<html><head><title>[XGAP] 4 Subgroup Lattices - Examples</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP003.htm">Previous</a>] [<a href ="CHAP005.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>4 Subgroup Lattices - Examples</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP004.htm#SECT001">The Subgroup Lattice of the Dihedral Group of Order 8</a>
<li> <A HREF="CHAP004.htm#SECT002">A Partial Subgroup Lattice of the Symmetric Group on 6 Points</a>
<li> <A HREF="CHAP004.htm#SECT003">A Partial Subgroup Lattice of the Cavicchioli Group</a>
<li> <A HREF="CHAP004.htm#SECT004">A Partial Subgroup Lattice of the Trefoil Knot Group</a>
<li> <A HREF="CHAP004.htm#SECT005">A Partial Subgroup Lattice of a Finitely Presented Group</a>
<li> <A HREF="CHAP004.htm#SECT006">A Partial Subgroup Lattice of a Space Group</a>
</ol><p>
<p>
XGAP provides a graphical interface to the  lattice or a partial lattice
of subgroups of groups.  For finitely  presented groups it gives you easy
access for example to the low index, prime quotient and Reidemeister-Schreier
algorithms in order to build a partial  lattice interactively.  For other
types of groups  it provides easy access to  many of  the group functions
(for example, the normalizer, normal subgroups, and Sylow subgroups).
<p>
This chapter explains  how to use this  interface by way of examples.  
Chapter  <a href="CHAP005.htm">Subgroup  Lattices - Systematic  Description</a> gives
details about the   various  options and menus available.    These two
chapters  will not  describe how to  write  your own programs using the
graphic extensions supplied by XGAP, see chapters <a href="CHAP006.htm">Graphic Sheets - Basic graphic operations</a> to <a href="CHAP009.htm">Graphic Graphs</a> for details.
<p>
It is assumed that you have already started XGAP.  On most systems you
do this by typing
<p>
<pre>
user@host:~&gt; xgap 
</pre>
<p>
on  the  command line.   Ask your  system administrator  if this does not
work.  This   command  will create   a new window,   the so called <font face="Gill Sans,Helvetica,Arial">GAP</font>
window, in which <font face="Gill Sans,Helvetica,Arial">GAP</font> is awaiting your input.   Depending on the window
system and window manager  you use, placing a new  window on your  screen
might be  done  automatically or might  require  you to use the  mouse to
choose a position for the  window and pressing the  left mouse button  to
place the window.
<p>
The small arrow   or cross you see on   your screen is  called a pointer.
Although the device used to move this pointer can be anything, a mouse, a
track ball, a glide-pad, or even something as exotic as a rat, we will use
the term mouse to refer to this pointer device.
<p>
In case that some computation takes longer than expected, for instance
the low index and the prime quotient can be quite time consuming, you
can always interrupt a computation by making the <font face="Gill Sans,Helvetica,Arial">GAP</font> window active
and pressing <var>CTRL-C</var> or selecting <code>Interrupt</code> in the <code>Run</code> menu.
Again, making a window active is system and window manager dependent.
In most cases you either have to move the pointer inside the <font face="Gill Sans,Helvetica,Arial">GAP</font>
window or you have to click on the title bar of the <font face="Gill Sans,Helvetica,Arial">GAP</font> window.
<p>
Note that for each of the following examples there is a small <font face="Gill Sans,Helvetica,Arial">GAP</font>
script in the <code>examples</code> subdirectory of the XGAP home directory
which contains the necessary commands. However we consider it better
for learning XGAP in a first time session if you type the commands
by hand as suggested in the next few sections of this manual.
<p>
<p>
<h2><a name="SECT001">4.1 The Subgroup Lattice of the Dihedral Group of Order 8</a></h2>
<p><p>
This  section   gives  you an   example    on how  to    use the function
<code>GraphicSubgroupLattice</code> (see <a href="CHAP005.htm#SECT001">GraphicSubgroupLattice</a> for  details), which 
will  display the Hasse diagram of the subgroup lattice of a given group.
<p>
Using the dihedral group of size 8 as example the following will show you
most features of the <code>GraphicSubgroupLattice</code> program.  This exercise is
best carried out in front of XGAP, trying the various commands yourself.
<p>
First  you   have to define a  group   in <font face="Gill Sans,Helvetica,Arial">GAP</font>,  this example  uses a
dihedral group defined as polycyclic group.
<p>
<pre>
gap&gt; d8 := DihedralGroup(8);
&lt;pc group of size 8 with 3 generators&gt;
gap&gt; SetName(d8,"d8");
</pre>
<p>
Now you ask for a graphical display by
<p>
<pre>
gap&gt; s := GraphicSubgroupLattice(d8);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of d8"&gt;
</pre>
<p>
XGAP will open a window containing a new graphic sheet, a menu bar
(menus are described below) above the graphic sheet and a title.  On most
systems the title will be either below the graphic sheet or above the menu
bar.  The dimension of the graphic sheet is fixed, changing the size of the
window will <strong>not</strong> change the size of the graphic sheet, see
<a href="CHAP005.htm#SECT008">GraphicSubgroupLattice, Poset Menu</a> how to resize the graphic sheet.  It
is possible that the graphic sheet is larger (depending on the lattice it
might be much larger) than the window.  In this case the window will
contain so called scrollbars which allow you to select the portion of the
graphic sheet which will be displayed. 
<p>
XGAP first shows only the whole group (which is already selected) and
the trivial subgroup, connected by a line indicating inclusion. 
<p>
<code>ConjugacyClassesSubgroups</code> computes and returns the conjugacy classes of
subgroups, so summing  up the sizes  of the classes   tells you how  many
elements the lattice has.
<p>
<pre>
    gap&gt; Sum( List( ConjugacyClassesSubgroups(d8), Size ) );
    10 
</pre>
<p>
10 is small enough to use <code>AllSubgroups</code> without painting the screen
black.  After you have clicked this menu entry in the <code>Subgroups</code> menu you
see the complete Hasse diagram in the graphic sheet.
<p>
The   following initial  remarks  can    be  made  about  the   graphical
representation of the subgroup lattice:
<p>
<dl compact>
<dt>--<dd>The vertex representing the trivial subgroup is labeled 1.
<p>
<dt>--<dd>Vertices representing subgroups of the same size are drawn at the
  same height. They are said to be ``on the same level''.  In our example
  the subgroups that belong to the vertices 2, 4, 5, 8 and 9 all
  have size 2, and the subgroups of 3, 6, and 7 have size 4. The
  default behaviour is to place a vertex above another one if the size of
  the subgroup represented by the first vertex is larger than the size of
  the subgroup of the second, but see <a href="CHAP005.htm#SECT001">GraphicSubgroupLattice</a> for details. At
  the right edge of the graphic sheet each level is labeled with the index
  of the subgroups contained. See <a href="CHAP005.htm#SECT003">levelsintro</a> for details on the
  labelling of levels.
<p>
<dt>--<dd>Vertices belonging to the same conjugacy class are placed closely
  together.  In our example the subgroups of 4 and 5 form one conjugacy
  class.
</dl>
<p>
The initial placement of the vertices chosen by <code>GraphicSubgroupLattice</code>
might not be optimal or you might want to choose a different one in order
to exploit certain features of the diagram.  It is therefore possible to
move the vertices around using the mouse.
<p>
The mouse together with the left mouse button can be used to move and
select vertices. A selected vertex is represented by a thicker circle,
colored red if your screen supports color.  For example, in order to <strong>move</strong>
vertex 4 use the mouse to place the pointer inside the circle around 4
and press the <strong>left</strong> mouse button.  Keep the mouse button pressed and start
moving the mouse.  The vertex will now follow the pointer.  Because of the
height restrictions given by the size it is not possible to move 4 above
6 or below 1. It must always stay within its level. If you release the
left mouse button vertex 4 will stay at its current position and the rest
of the conjugacy class (in this example 5) will be moved to this new
position.
<p>
In  order to <strong>select</strong> vertex <i>G</i>  place the pointer inside the diamond
around <i>G</i>, press the <strong>left</strong> mouse button  and release it immediately. 
Do  not move the  mouse  while you hold down  the  left mouse button.  
Vertex <i>G</i> now has a slightly thicker boundary and is  red if you have
a color screen.  There are two different ways  to select more than one
vertex,  see <a href="CHAP004.htm#SECT002">A Partial  Subgroup Lattice of  the Symmetric Group on 6 Points</a> or <a href="CHAP005.htm#SECT005">GraphicSubgroupLattice, Selecting Vertices</a>.
<p>
On the top of the window, above the graphic sheet, you  can see a list
of  menu names:  <code>Sheet</code>,  <code>Poset</code>, and <code>Subgroups</code>.   In order to
open  any of  these <strong>pull down  menus</strong>  place  the pointer inside  the
button containing the menu name and press the left mouse button.  Keep
the button pressed.  A pull down menu will  be shown and by moving the
pointer down  you can choose  a menu entry.   By choosing an entry and
then  releasing    the mouse   button the   entry    is  selected, the
corresponding function is  executed and the  pull down menu is closed. 
If you release the mouse button while the  pointer is outside the pull
down  menu the menu  is closed without selecting  any entry. Note that
this   behaviour is different from that   of some other graphical user
interfaces such as for example Windows.
<p>
Now  select <code>Change Labels</code> from the  <code>Poset</code> menu.  If this entry
is not   available  you have  failed to    select vertex  <i>G</i>.   After
selecting <code>Change Labels</code> a small dialog box is  opened asking for a
label.  Type in <code>D8</code> and press the <var>return</var> key or click on <code>OK</code>.  The
label of vertex <i>G</i> will now be changed to ``<i>D</i>8''. Note that in the
X Window System you have to move the pointer on  the text field if you
want to edit the label.
<p>
In  order to find  out which  vertex represents the  centre  of <i>D</i><sub>8</sub>,
first select vertex <i>D</i>8 and then the  menu entry <code>Centres</code> from the
<code>Subgroups</code> menu.  In case of  a color screen,  vertex <i>D</i>8 will  be
selected and colored  red, and vertex 2  will be colored green.  The
color green indicates that vertex 2 is the result  of a computation. 
There will also be a message  in the <font face="Gill Sans,Helvetica,Arial">GAP</font>  window saying that vertex
2 represents the centre of the group belonging to vertex <i>D</i>8.
<p>
<pre>
#I  Centres (D8) --&gt; (2)
</pre>
<p>
Most of  the menu entries  in <code>Subgroups</code> should be self-explanatory, for
details and  the   difference   between  <code>Closure</code>  and    <code>Closures</code> see
<a href="CHAP005.htm#SECT009">GraphicSubgroupLattice, Subgroups Menu</a>.
<p>
If you  have  selected  some  vertices (in  the   example <i>D</i>8 is  now
selected), and you want to investigate  the subgroups corresponding to
these vertices further  in <font face="Gill Sans,Helvetica,Arial">GAP</font>, the function  <code>SelectedGroups</code> will
return a list of  these  subgroups (note  that  you can also   achieve
calling this function by  selecting  <code>SelectedGroups to GAP</code> in  the
<code>Subgroups</code> menu):
<p>
labelgapxgap
<pre>
gap&gt; SelectedGroups(s);
[ d8 ]
</pre>
<p>
On the other hand, the functions supplied via the <code>Subgroups</code> menu are by
far not all functions applicable to groups.  In order to show results of a
computation in <font face="Gill Sans,Helvetica,Arial">GAP</font> in the diagram, you can use <code>SelectGroups</code>.  The
function <code>SelectGroups</code> allows you to mark any set of subgroups of <i>D</i><sub>8</sub> in
the diagram.
<p>
For instance,  you can compute the lower central series of this (nilpotent)
group in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
<p>
<pre>
gap&gt; l := LowerCentralSeries(d8);
[ d8, Group([ f3 ]), Group([ &lt;identity&gt; of ... ]) ]
gap&gt; SelectGroups(s,l);
</pre>
<p>
This lower central series corresponds to the vertices <i>D</i>8, 2 and
1 which will now be selected.  If, as it is not the case in this
example, the subgroups are not yet depicted in the lattice, a warning
appears in the <font face="Gill Sans,Helvetica,Arial">GAP</font> command window. You have to use <code>InsertVertex</code>
to insert a new vertex into the lattice (note that you can also
achieve this by selecting <code>InsertVertices from GAP</code> in the
<code>Subgroups</code> menu, see section <a href="CHAP005.htm#SSEC006.1">InsertVertex</a> for the complete
description of this function or section <a href="CHAP004.htm#SECT002">xgapgap</a> for an example).
<p>
To  summarize the above: the  function <code>SelectedGroups</code> can be used to
transfer information  from   the  diagram  to  <font face="Gill Sans,Helvetica,Arial">GAP</font>, the   functions
<code>SelectGroups</code> and <code>InsertVertex</code> can  be used to transfer information
from <font face="Gill Sans,Helvetica,Arial">GAP</font> to the diagram.
<p>
In order to finish this example, close the window by selecting <code>close
graphic sheet</code> from the <code>Sheet</code> menu.  This will close the window
containing the Hasse diagram of <i>D</i><sub>8</sub>.
<p>
In this example you have learned, how to display the Hasse diagram of the
subgroup lattice of a group using <code>GraphicSubgroupLattice</code>, how to use the
mouse to move and select vertices, how to select a menu entry and how to
transfer information between the Hasse diagram and <font face="Gill Sans,Helvetica,Arial">GAP</font> using <code>SelectGroups</code>
and <code>SelectedGroups</code>.
<p>
In order to learn more about the menus <code>Sheet</code> and <code>Poset</code>, which were only
mentioned very briefly, see <a href="CHAP005.htm#SECT007">GraphicSubgroupLattice, Sheet Menu</a>, and
<a href="CHAP005.htm#SECT008">GraphicSubgroupLattice, Poset Menu</a>.  
<p>
<p>
<h2><a name="SECT002">4.2 A Partial Subgroup Lattice of the Symmetric Group on 6 Points</a></h2>
<p><p>
This section investigates the subgroup lattice of <i>S</i><sub>6</sub>.
<p>
<pre>
gap&gt; s6 := SymmetricGroup(6);
Sym( [ 1 .. 6 ] )
gap&gt; SetName(s6,"S6");
gap&gt; cc := ConjugacyClassesSubgroups(s6);;
gap&gt; Sum(List(cc,Size));
1455
</pre>
<p>
As there are 1455 subgroups,  displaying  the whole lattice of  subgroups
would not  be helpful because  there are simply  too many.   Therefore this
example builds only a partial  subgroup lattice.   We  assume that you  are
familiar with  the  general ideas,  mouse   actions and  menus, which  were
discussed in <a href="CHAP004.htm#SECT001">The Subgroup Lattice of the Dihedral Group of Order 8</a>.
<p>
We again start to build a partial lattice, by using
<code>GraphicSubgroupLattice</code> (see <a href="CHAP005.htm#SECT001">GraphicSubgroupLattice</a>).  After you have
entered
<p>
<pre>
gap&gt; s := GraphicSubgroupLattice(s6);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of S6"&gt;
</pre>
<p>
XGAP  will open  a window  containing  a new  graphic  sheet with  two
connected vertices   labeled  1 and <i>G</i>.     Vertex  1 represents the
trivial subgroup and  vertex <i>G</i> the group <i>S</i><sub>6</sub>.   Vertex <i>G</i> is already
selected, so it will be red if your screen supports color.
<p>
XGAP can automatically write a protocol of all the subsequent
actions you perform via mouse clicks. This is convenient because in
comparison to normal <font face="Gill Sans,Helvetica,Arial">GAP</font> sessions you do not have the script of
typed commands. You can activate this feature by selecting <code>Start
Logging</code> from the <code>Subgroups</code> menu. XGAP prompts you for a filename 
via a file selector box. See <a href="CHAP005.htm#SECT002">loggingfacility</a> for details about this
feature. 
<p>
In order  to  find all subgroups   of size 60, we  cannot   not use the
<code>Subgroups</code> menu directly, so go back into the  <font face="Gill Sans,Helvetica,Arial">GAP</font> window and extract
the conjugacy classes of <code>cc</code> whose representatives have size 60.
<p>
<pre>
gap&gt; c60 := Filtered(cc,x-&gt;Size(Representative(x))=60);;
gap&gt; s60 := List(c60,Representative);
[ Group([ (1,2)(3,4), (1,3,5) ]), Group([ (1,2)(3,4), (1,2,3)(4,5,6) ]) ]
</pre>
<p>
labelxgapgap
We now use the function <code>InsertVertex</code> (see <a href="CHAP005.htm#SSEC006.1">InsertVertex</a>) to add
these two subgroups to your partial lattice.
<p>
<pre>
gap&gt; for g in s60 do InsertVertex(s,g); od;
</pre>
<p>
Note  that  we  could have    achieved   this result  with the   entry
<code>InsertVertices from GAP</code>  in   the    <code>Subgroups</code>  menu,   see
<a href="CHAP005.htm#SSEC006.1">InsertVertex</a>.  The  Hasse diagram now  contains  four vertices.  The
new  vertices are  <strong>not</strong> selected automatically.   You can do  this as
mentioned above  by clicking with  the <strong>left</strong>  mouse button on  them.  
Selecting <code>Conjugate Subgroups</code> from the <code>Subgroups</code> menu adds the
complete conjugacy classes.  Please do  this first for vertex 2  and
then   for vertex 3   such that  the  numbering of  vertices  in the
following description is correct!
<p>
In order  to find out  what type of subgroups  we  are looking at, use
another  kind of menu not  discussed  so far, namely the ``Information''
menu.  Place the pointer inside  vertex 3,  press the <strong>right</strong>  mouse
button and release  it immediately.  This  will  pop up a  new window,
containing some text    describing  vertex 3 (as   mentioned  above,
depending on the window system and window manager, placing this window
on the screen might require some interaction with the mouse).
<p>
<pre>
Size        60
Index       12
IsAbelian   unknown
IsCentral   unknown
IsCyclic    unknown
IsNilpotent false
IsNormal    false
IsPerfect   true
IsSimple    unknown
IsSolvable  false
Isomorphism unknown
</pre>
<p>
Note that <font face="Gill Sans,Helvetica,Arial">GAP</font> does not yet automatically draw the conclusion that a
nonsolvable subgroup  is also not  abelian, cyclic or central.  Place the
pointer on top of the entry ``Isomorphism'' and press the <strong>left</strong> mouse
button.  After a while this entry is changed to
<p>
<pre>
Isomorphism [ 60, 5 ]
</pre>
<p>
telling you that the subgroup represented by vertex 3 is isomorphic to
the alternating group on five symbols.  The notation <code>[ 60, 5 ]</code> comes out
of the small groups library and is the only information about the
isomorphism type we can get from <font face="Gill Sans,Helvetica,Arial">GAP</font>4 up to now. Select <var>close</var> to close
the ``Information'' menu.  Repeat this with vertex 2, you will see that the
subgroup of vertex 2 is also isomorphic to <i>A</i><sub>5</sub>, however these two <i>A</i><sub>5</sub>
inside <i>S</i><sub>6</sub> are not conjugate in <i>S</i><sub>6</sub>.  The ``Information'' menu is described
in detail in <a href="CHAP005.htm#SECT010">GraphicSubgroupLattice, Information Menu</a>.
<p>
Now we want to compute the normalizers of the elements of the conjugacy
class containing the subgroup of vertex 3.  You could either select
vertex 3 and then <var>Normalizers</var> and repeat this process for the vertices
9 to 13, or you can first select the vertices 3, 9 to 13 and then
select <var>Normalizers</var>.  But how to select more than one vertex?  If you
first select 3 and then 9, vertex 3 will get deselected as soon as
9 gets selected.  However, if you select vertex 3, place the pointer
inside vertex 9, hold down the <var>SHIFT</var> key on your keyboard and then
select vertex 9 using the left mouse button, vertex 9 will be selected
in addition to vertex 3.  Another method to select more than one vertex
is to use the rubber band to catch vertices inside a rectangle.  Place the
pointer left and a bit higher than vertex 3 <strong>outside</strong> any other vertex.
Press the <strong>left</strong> mouse button and hold it down.  Now, using the mouse, move
the pointer right and slightly below vertex 13.  You see a rectangle, one
corner at your start position and the other following the pointer.  If
vertices 3 and 9 to 13 are all inside this rectangle, release the
mouse button.  Now these vertices are selected.  Select <code>Normalizers</code> from
the <code>Subgroups</code> menu to compute and display the normalizers.
<p>
Now select vertex 3 and 4 and compute the intersection.  The
intersection is of size 10.  Select this intersection and use
<code>SelectedGroups</code> to get a <font face="Gill Sans,Helvetica,Arial">GAP</font> record describing the subgroup.
<p>
<pre>
gap&gt; l := SelectedGroups(s);
[ Group([ (2,3)(4,6), (1,2)(3,4) ]) ]
gap&gt; u := l[1];
Group([ (2,3)(4,6), (1,2)(3,4) ])
</pre>
<p>
In order  to find out which subgroups  of the complete lattice  lie above
the subgroup <code>u</code> you can  use <code>Intermediate Subgroups</code>. You select the
whole group in addition to <code>u</code> and choose <code>Intermediate Subgroups</code> in the 
<code>Subgroups</code> menu. You get 6 groups, some of them are already in the
lattice, the others are added.
<p>
There is another feature we have not seen yet.  Close the current graphic
sheet and start again with a fresh one.
<p>
<pre>
gap&gt; Close(s);
gap&gt; s := GraphicSubgroupLattice(s6);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of S6"&gt;
</pre>
<p>
In order to compute a Sylow 2 subgroup select <code>Sylow Subgroup</code> from the
<code>Subgroups</code> menu.   A small dialog box  will  pop up asking  for a prime,
type in  2 and press <var>return</var> or  click on <code>OK</code>.   Now select  this new
vertex 2   representing the Sylow 2  subgroup  and compute its normal
subgroups.  This is rather slow because the  function checks for each new
vertex if the corresponding  subgroup is conjugate to  an old one  of the
same size.  
<p>
This is  now the  end of our  partial  investigation of  the (partial)
subgroup  lattice  of <i>S</i><sub>6</sub>, close  the  graphic sheet(s) using <code>close
graphic sheet</code> of the <code>Sheet</code> menu. If you started the logging facility
of XGAP as described above you now have a file (probably called
<code>xgap.log</code> if you did not change the default) describing the actions
we performed.
<p>
<p>
<h2><a name="SECT003">4.3 A Partial Subgroup Lattice of the Cavicchioli Group</a></h2>
<p><p>
This  section  investigates the  following  finitely presented group <i>C</i><sub>2</sub>,
which was first investigated by Alberto Cavicchioli in <a href="biblio.htm#Cav86"><cite>Cav86</cite></a>:
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"> &#9001;<i>a</i>, <i>b</i> &nbsp;&nbsp;;&nbsp;&nbsp;<i>aba</i><sup>&#8722;2</sup><i>ba</i>=<i>b</i>, (<i>b</i><sup>&#8722;1</sup><i>a</i><sup>3</sup><i>b</i><sup>&#8722;1</sup><i>a</i><sup>&#8722;3</sup>)<sup>2</sup>=<i>a</i><sup>&#8722;1</sup>&#9002;&#183;</td></tr></table></td></tr></table>
<p>
In this example we will show a way to prove a finitely presented group
to be infinite, and to find some big nonabelian factor groups of it.
<p>
The following <font face="Gill Sans,Helvetica,Arial">GAP</font> commands define <i>C</i><sub>2</sub>.
<p>
<pre>
gap&gt; f := FreeGroup( "a", "b" );  a := f.1;;  b := f.2;;
&lt;free group on the generators [ a, b ]&gt;
gap&gt; c2 := f / [ a*b*a^-2*b*a/b, (b^-1*a^3*b^-1*a^-3)^2*a ];
&lt;fp group on the generators [ a, b ]&gt;
gap&gt; SetName(c2,"c2");
</pre>
<p>
We again assume that you are familiar with the general ideas, mouse actions
and menus, which were discussed in <a href="CHAP004.htm#SECT001">The Subgroup Lattice of the Dihedral Group of Order 8</a> and <a href="CHAP004.htm#SECT002">A Partial Subgroup Lattice of the Symmetric Group on 6 Points</a>.
<p>
In order  to build a  partial lattice of a  finitely presented group, you
again use the function  <code>GraphicSubgroupLattice</code>.  But if the first  argument
to <code>GraphicSubgroupLattice</code> is a finitely presented group the available menus
are different  from the example in  the previous section.  After you have
entered
<p>
<pre>
gap&gt; s := GraphicSubgroupLattice(c2);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of c2"&gt;
</pre>
<p>
XGAP will open a window containing a new graphic sheet.  Compared to the
interactive lattice of a permutation group as described in the previous
section, there are the following differences: 
<p>
-- There is only one vertex instead of two.  This vertex labeled <i>G</i> is the
whole group <i>C</i><sub>2</sub>.  There is no vertex for the trivial subgroup (yet).
<p>
-- If you pull down the <code>Subgroups</code> menu, you will see  that this menu is
now   very different.   It gives  you   access to various algorithms  for
finitely presented  groups  but most of  the  entries  from the last  two
examples  are missing because most of  the <font face="Gill Sans,Helvetica,Arial">GAP</font>  functions behind these
entries are not applicable to (infinite) finitely presented groups.
<p>
This  example will show  you how to prove that  <i>C</i><sub>2</sub> is infinite.  First
look at the abelian invariants in order to see what the commutator factor
group is.   In  order  to  compute the abelian    invariants pop  up  the
``Information'' menu.   This is done in exactly  the same manner  as in the
previous section.  Place the pointer inside vertex <i>G</i>, press the <strong>right</strong>
mouse button and release   it  immediately.  This ``Information'' menu   is
described  in   detail in  <a href="CHAP005.htm#SECT013">GraphicSubgroupLattice  for FpGroups, Information Menu</a>.
<p>
<pre>
Index              1
IsNormal           true
IsFpGroup          unknown
Abelian Invariants unknown
Coset Table        unknown
IsomorphismFpGroup unknown
Factor Group       unknown 
</pre>
<p>
This tells you what XGAP already knows  about the group associated with
vertex <i>G</i>.   In order to compute the  abelian invariants click onto this
line.  After a while this entry will change to
<p>
<pre>
Abelian Invariants perfect 
</pre>
<p>
telling you  that <i>C</i><sub>2</sub>  is perfect.   So none   of the  <code>Subgroups</code> menu
entries <code>Abelian Prime Quotient</code>,  <code>All Overgroups</code>,  <code>Conjugacy Class</code>,
<code>Cores</code>,  <code>Derived Subgroups</code>,  <code>Intersection</code>, <code>Intersections</code>,
<code>Normalizers</code> or  <code>Prime Quotient</code> will compute any new subgroups.
<p>
In order to avoid accidents the menu entries <code>Abelian Prime Quotient</code>,
<code>All Overgroups</code>, <code>Epimorphisms (GQuotients)</code>, <code>Conjugacy Class</code>, 
<code>Low Index  Subgroups</code>, and <code>Prime Quotient</code>  from the <code>Subgroups</code> menu are
only  selectable   if exactly   one vertex   is selected  because  the
functions behind   these entries are in  general  quite time and space
consuming.
<p>
Close the ``Information'' window and select <code>Low Index Subgroups</code> from the
<code>Subgroups</code> menu.  A small dialog box will  pop up asking  for a limit on
the index.  Type in 12 and press <var>return</var> or click on <code>OK</code>.  In general
it  is hard to say what   kind of index  limit  will still work, for some
groups even 5 might be too  much while for others  20 works fine, see
also <a href="https://www.gap-system.org/Manuals/doc/ref/chap47.html#X85C5151380E19122">LowIndexSubgroupsFpGroup</a>.
<p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> computes 10 subgroups  of index 11  and 8 subgroups of index
12.  If you now start to check the abelian invariants of the index 12
subgroups you will  find out that all  subgroups represented by  vertices
3 to 10  have  a finite  commutator  factor group except  the subgroup
belonging  to  vertex  4    which has  an infinite    abelian quotient.
Therefore the group <i>C</i><sub>2</sub> itself is infinite.
<p>
Now we want to investigate <i>C</i><sub>2</sub> a little further using <font face="Gill Sans,Helvetica,Arial">GAP</font>.  Select
vertices  3, 4, and   5 and  switch   to  the <font face="Gill Sans,Helvetica,Arial">GAP</font>  window.   Use
<code>SelectedGroups</code> to get the subgroups associated with these vertices.
<p>
<pre>
gap&gt; u := SelectedGroups( s );
[ Group([ a, b*a^2*b^-2, b*a*b^2*a^-1*b^-1*a^-1*b^-1, b^4*a^-2*b^-2, 
      b^2*a^3*b^-1*a^-1*b^-2 ]), 
  Group([ a, b^2*a*b^-1*a^-1*b^-1, b^3*a^-1*b^-1, b*a*b*a^3*b^-1 ]), 
  Group([ a, b^2*a*b^-1*a^-1*b^-1, b*a^3*b^-2, b^4*a^-1*b^-3, 
      b*a*b^3*a^-1*b^-1 ]) ]
</pre>
<p>
<code>FactorCosetAction</code> computes for each of  these subgroups <i>u</i><sub><i>i</i></sub>  the
operation of  <i>C</i><sub>2</sub> on its cosets. It returns the result as a homomorphism
of <i>C</i><sub>2</sub> onto a permutation group. The  operation on <i>u</i><sub><i>i</i></sub> is therefore a
permutation representation of the factor group <br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"><i>C</i><sub>2</sub> / <i>Core</i>(<i>u</i><sub><i>i</i></sub>)&#183;</td></tr></table></td></tr></table> Using
<code>DisplayCompositionSeries</code> we can identify these factor groups.
<p>
<pre>
gap&gt; p := List( u, x -&gt; FactorCosetAction( c2, x ) );;
gap&gt; l := List( p, Image );;
gap&gt; for x  in l  do DisplayCompositionSeries(x);  Print("\n");  od;
G (2 gens, size 95040)
 | M(12)
1 (0 gens, size 1)

G (2 gens, size 660)
 | A(1,11) = L(2,11) ~ B(1,11) = O(3,11) ~ C(1,11) = S(2,11) ~ 2A(1,11) = U(2,11)
1 (0 gens, size 1)

G (2 gens, size 239500800)
 | A(12)
1 (0 gens, size 1)
</pre>
<p>
(This display can look a little different according to  the <font face="Gill Sans,Helvetica,Arial">GAP</font> version you
use.)
<p>
So <i>C</i><sub>2</sub> contains the Mathieu group <i>M</i><sub>12</sub>, the alternating group on
12  symbols and <i>PSL</i>(2,11)   as factor groups.   Therefore it would
have   been   possible  to   find   vertex  4   using  
<code>Epimorphisms (GQuotients)</code>  instead of  <code>Low Index Subgroups</code>.   
Close the graphic
sheet by selecting the menu entry <code>close graphic sheet</code> from the <code>Sheet</code>
menu and start with a fresh one.
<p>
<pre>
gap&gt; s := GraphicSubgroupLattice(c2);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of c2"&gt;
</pre>
<p>
Select  <code>Epimorphisms (GQuotients)</code> from  the  <code>Subgroups</code> menu.  This
pops  up   a   menu   similar  to    the  ``Information''   menu    (see
<a href="CHAP005.htm#SECT012">GraphicSubgroupLattice for FpGroups, Subgroups Menu</a>).
<p>
<pre>
Sym(n)
Alt(n)
PSL(d,q)
Library
User Defined 
</pre>
<p>
Select <var>PSL(d,q)</var>, which pops up a dialog  box asking for a dimension. 
Enter <code>2</code> and click on <var>OK</var>. Then a second dialog box pops up asking
for a field size.  Enter <code>11</code> and click on  <var>OK</var>. After a short time
of  computation the display  in  the <code>Epimorphisms (GQuotients)</code>  menu
changes and shows
<p>
<pre>
PSL(2,11)      1 found
</pre>
<p>
telling you, that <font face="Gill Sans,Helvetica,Arial">GAP</font> has found 1 epimorphism (up to inner
automorphisms of <i>PSL</i>(2,11)) from <i>C</i><sub>2</sub> onto <i>PSL</i>(2,11).  Click on
<var>display point stabilizer</var> to create a new vertex representing a subgroup
<i>u</i> such that the factor group of <i>C</i><sub>2</sub> / <i>Core</i>(<i>u</i>) is isomorphic to
<i>PSL</i>(2,11). You could have clicked on <var>display</var> to create a new vertex
representing the kernel of the epimorphism.
<p>
This is  now the  end of  our  partial investigation of  the (partial)
subgroup lattice of  <i>C</i><sub>2</sub>, you have  seen that <i>C</i><sub>2</sub> is infinite  and
contains <i>M</i><sub>12</sub>, <i>Alt</i>(12), and <i>PSL</i>(2,11) as factor groups.  Close
the  graphic sheet by selecting <code>close  graphic sheet</code>  from the <code>Sheet</code>
menu.
<p>
<p>
<h2><a name="SECT004">4.4 A Partial Subgroup Lattice of the Trefoil Knot Group</a></h2>
<p><p>
This  section  investigates the  following  finitely presented group, the
trefoil knot group <i>K</i><sub>3</sub>.
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"> &#9001;<i>a</i>, <i>b</i> &nbsp;&nbsp;;&nbsp;&nbsp;<i>aba</i> = <i>bab</i> &#9002;</td></tr></table></td></tr></table>
<p>
This examples shows some  limitations   of the methods available,   in
particular if infinite factors occur.
<p>
<pre>
gap&gt; f := FreeGroup( "a", "b" );
&lt;free group on the generators [ a, b ]&gt;
gap&gt; k3 := f / [ f.1*f.2*f.1 / (f.2*f.1*f.2) ];
&lt;fp group on the generators [ a, b ]&gt;
gap&gt; s := GraphicSubgroupLattice(k3);
&lt;graphic subgroup lattice "GraphicSubgroupLattice"&gt;
</pre>
<p>
If you  compute the Abelian invariants of  <i>K</i><sub>3</sub> you will see that the
commutator factor  group is isomorphic to the   infinite cyclic group. 
If you try to  compute the derived subgroups it  works!  Just click on
<code>Derived Subgroups</code>  in the <code>Subgroups</code> menu. A  vertex appears in a
level marked with <code>[  infinity, 1 ]</code>. However,  there are not too many
things you can do with such infinite index subgroups up  to now, as we
will illustrate below:
<p>
First  produce some  more  subgroups  by  <code>Low Index Subgroups</code> (for
example with index limit 5). If you now try to compare  one of the new
subgroups with the derived subgroup,  this is possible. If you however
try to calculate the intersection of one of the finite-index subgroups
with the derived subgroups, <font face="Gill Sans,Helvetica,Arial">GAP</font> will run into an error:
<p>
<pre>
Error the coset enumeration has defined more than 256000 cosets:
type 'return;' if you want to continue with a new limit of 512000 cosets,
type 'quit;' if you want to quit the coset enumeration,
type 'maxlimit := 0; return;' in order to continue without a limit,
...   (a few lines follow)
</pre>
<p>
This can happen if the coset enumeration algorithm tries to enumerate
the cosets of a subgroup with infinite index.  This situation can also
occur with other operations. 
<p>
You can leave this break loop by entering the command <code>quit;</code> or by
clicking <code>Leave Break Loop</code> in the <code>Run</code> menu of the main XGAP
window.
<p>
Earlier you have computed the subgroups of index at most 5.  There
is one normal subgroup of index 2 belonging to vertex 6 and one of
index 4 belonging to vertex 8. There is <strong>no</strong> line between those
two vertices. Select both and click on <code>Compare Subgroups</code> in the
<code>Subgroups</code> menu. A line appears and the line between vertices 8 and
<i>G</i> vanishes. The reason for this is, that the
<code>LowIndexSubgroupsFpGroup</code> call did not deliver the complete inclusion
info. This can always happen for finitely presented groups in XGAP.
In this case you have to compare the subgroups manually by 
<code>Compare Subgroups</code>. Note that this can mean large computations, especially if
the indices are huge.
<p>
Now select vertex 10 and choose <code>Cores</code> from the <code>Subgroups</code> menu.
You will get a new vertex 12 for  an index 24 subgroup. Select the
vertices 12   and <i>G</i> and choose  <code>Intermediate  Subgroups</code> from the
<code>Subgroups</code> menu. You will get lots  of new vertices. Note that some
of them  are duplicates of  those which  were already  in the lattice. 
This is because comparison of subgroups can  be quite expensive and is
therefore   <strong>not</strong> performed automatically    in  the case of  finitely
presented groups.
<p>
Select all vertices with a rubber band (click into the top left corner
of  the sheet, hold down  the mouse and  move the pointer to the lower
right corner, then  release  the mouse  button), and   choose 
<code>Compare Subgroups</code> from the <code>Subgroups</code> menu.  A few vertices will disappear
and  you get  some  messages in  the <font face="Gill Sans,Helvetica,Arial">GAP</font>  window   about merging of
vertices.
<p>
The  display   is also  not  fully correct  with  respect to conjugacy
classes.    <code>IntermediateSubgroups</code>    does  not  return  the complete
information about conjugacy of subgroups. Because also conjugacy tests
can be very expensive, they are also <strong>not</strong> performed automatically for
finitely   presented   groups.  Select    <code>Test  Conjugacy</code>  from  the
<code>Subgroups</code>  menu to  trigger  this  test  manually (note  that  all
vertices are still selected!).   The vertices belonging  to  conjugate
subgroups are  arranged together and  if you move those containing the
normal subgroup  of index 24    above this  one you  recognize   the
subgroup lattice   of the symmetric  group on   4 points above  that
normal subgroup.
<p>
This is  now  the end  of our partial   investigation of the (partial)
subgroup lattice of <i>K</i><sub>3</sub>, close the graphic sheet by selecting <code>close
graphic sheet</code> from the <code>Sheet</code> menu.
<p>
<p>
<h2><a name="SECT005">4.5 A Partial Subgroup Lattice of a Finitely Presented Group</a></h2>
<p><p>
This section describes the investigation of the following finitely presented
group: 
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"> <i>G</i> : = &#9001;<i>a</i>, <i>b</i> &nbsp;&nbsp;; &nbsp;&nbsp;<i>a</i><sup>6</sup> = 1 &#9002;</td></tr></table></td></tr></table>
We will show especially how to deal with subgroups which have a very large
index like those occurring in the prime quotient algorithm.
<p>
Define the group and open the subgroup lattice window:
<p>
<pre>
gap&gt; f := FreeGroup(2);
&lt;free group on the generators [ f1, f2 ]&gt;
gap&gt; g := f/[f.1^6];
&lt;fp group on the generators [ f1, f2 ]&gt;
gap&gt; s := GraphicSubgroupLattice(g);
&lt;graphic subgroup lattice "GraphicSubgroupLattice"&gt;
</pre>
<p>
First compute prime quotients by <code>Prime Quotient</code> in the <code>Subgroups</code>
menu. You are asked for a prime and a class. Enter 2 and 7
respectively. You get lots of output in the <font face="Gill Sans,Helvetica,Arial">GAP</font> command window and
seven new vertices. Some of the corresponding subgroups have huge
indices. Note that these groups are only represented as kernels of
epimorphisms within <font face="Gill Sans,Helvetica,Arial">GAP</font>. So explicit calculation of a coset table
or a presentation could take very long or be absolutely impossible!
<p>
Now compute epimorphisms onto the symmetric group on 3 points by
<code>Epimorphisms (GQuotients)</code> in the <code>Subgroups</code> menu, but use a polycyclic 
presentation as follows (the reason for this will be explained below):
<p>
<pre>
gap&gt; IdGroup(SymmetricGroup(3));
[ 6, 1 ]
gap&gt; s3 := SmallGroup(6,1);
&lt;pc group with 2 generators&gt;
gap&gt; IMAGE_GROUP := s3;;
</pre>
<p>
This first determines the identification number of the symmetric group 
on 3 points within the small groups library, and then fetches this
group as a polycyclic group. For groups of size less than 1000 this
is often a good way to get a polycyclic presentation. Note that
<code>SymmetricGroup(3)</code> leads to a permutation group. The last statement
stores the group in a variable which can be used by XGAP. 
<p>
Select vertex <i>G</i>, then click on <code>Epimorphisms (GQuotient)</code> in the
<code>Subgroups</code> menu and select <code>User defined</code> in the window that pops up.
This will always use the group stored in the global variable
<code>IMAGE_GROUP</code>. <font face="Gill Sans,Helvetica,Arial">GAP</font> finds three epimorphisms. Display the three
kernels by selecting <var>display</var> in the epimorphisms window.
<p>
Note that the new vertex 9 will be drawn on the line between
vertices 2 and 3 because there is not yet a vertex in the level
corresponding to index 6. You can move it aside by dragging it with
the mouse to some better position within its level.
<p>
Now select vertices 8 and 11 and calculate the intersection of the 
two subgroups of indices 137438953472 and 6 respectively. <font face="Gill Sans,Helvetica,Arial">GAP</font>
can calculate this intersection by calculating the subdirect product
of the image groups of the epimorphisms (the index of the subgroup
belonging to vertex 12 in <i>G</i> is 412316860416 which is three times
of the index of the subgroup belonging to vertex 11). Note that this 
subdirect product can only be calculated because the two image groups
are polycyclic groups. This is the reason why we needed <i>S</i><sub>3</sub> as
polycyclic group earlier.
<p>
This  is now  the end of   our partial investigation  of the (partial)
subgroup lattice  of <i>G</i>, close  the graphic sheet by selecting <code>close
graphic sheet</code> from the <code>Sheet</code> menu.
<p>
<p>
<h2><a name="SECT006">4.6 A Partial Subgroup Lattice of a Space Group</a></h2>
<p><p>
This section describes an investigation of an (infinite) space group
provided by the catalogue CRYSTCAT of crystallographic groups and
using the package CRYST. Here you will see that subgroups of
finite index and of finite size can occur at the same time in a
graphic subgroup lattice of an infinite group. Note that you have to
install these packages to try this example.
<p>
Load the packages, define the group and open the subgroup
lattice window: 
<p>
<pre>
gap&gt; LoadPackage("crystcat");;
gap&gt; LoadPackage("cryst");;
gap&gt; g := SpaceGroupBBNWZ(4,6,3,1,2);
SpaceGroupOnRightBBNWZ( 4, 6, 3, 1, 2 )
gap&gt; s := GraphicSubgroupLattice(g);
&lt;graphic subgroup lattice "GraphicSubgroupLattice of SpaceGroupOnRightBBNWZ( 4, \
6, 3, 1, 2 )"&gt;
</pre>
<p>
This fetches the space group of dimension 4, associated crystal
system number 6, <b>Q</b>-class 3, <b>Z</b>-class 1, and space group type
2 (see the CRYSTCAT documentation for an explanation of this).
<p>
Now we calculate some maximal subgroups with finite index and choose three of
them:
<p>
<pre>
gap&gt; m := MaximalSubgroupClassReps(g,rec(latticeequal := true));;
gap&gt; mm := m{[1..3]};
[ &lt;matrix group with 7 generators&gt;, &lt;matrix group with 7 generators&gt;, 
  &lt;matrix group with 7 generators&gt; ]
</pre>
<p>
Again refer to the CRYST package documentation for an
explanation of these commands. Insert this list of three subgroups
into the lattice by selecting <code>InsertSubgroups from GAP</code> from the
<code>Subgroups</code> menu.
<p>
Next calculate subgroups of infinite index but with finite size:
<p>
<pre>
gap&gt; w := WyckoffPositions(g);;
gap&gt; ww := w{[1..3]};
[ &lt; Wyckoff position, point group 11, translation := [ 0, 1/2, 0, 0 ], 
    basis := [  ] &gt;
    , &lt; Wyckoff position, point group 11, translation := [ 0, 1/2, 0, 1/2 ], 
    basis := [  ] &gt;
    , &lt; Wyckoff position, point group 11, translation := [ 0, 1/2, 1/2, 0 ], 
    basis := [  ] &gt;
     ]
gap&gt; www := List(ww,WyckoffStabilizer);
[ &lt;matrix group with 3 generators&gt;, &lt;matrix group with 3 generators&gt;, 
  &lt;matrix group with 3 generators&gt; ]
</pre>
<p>
Insert these subgroups into the lattice by selecting
<code>InsertSubgroups from GAP</code> from the <code>Subgroups</code> menu. They will be
inserted in the level for groups of size 8.
<p>
Now you can compute the intersection of a subgroup with finite index
and a subgroup with finite size, select for example vertex 2 and vertex
5 and choose <code>Intersection</code> from the <code>Subgroups</code> menu. You get a new 
vertex representing a subgroup of size 4.
<p>
If you now calculate the centralizers of the fifteen latticeequal maximal 
subgroups from above, you get among them four non-trivial cyclic subgroups:
<p>
<pre>
gap&gt; c := List(m,x-&gt;Centralizer(g,x));
[ &lt;matrix group with 1 generators&gt;, Group([  ]), Group([  ]), Group([  ]), 
  &lt;matrix group with 1 generators&gt;, Group([  ]), Group([  ]), 
  &lt;matrix group with 1 generators&gt;, Group([  ]), 
  &lt;matrix group with 1 generators&gt;, Group([  ]), Group([  ]), Group([  ]), 
  Group([  ]), Group([  ]) ]
</pre>
<p>
Insert these into the graphic sheet by selecting <code>Insert Vertices from GAP</code>
from the <code>Subgroups</code> menu. You
will get four different new vertices representing groups with infinite
index <strong>and</strong> infinite size.  Each such vertex is placed into a level on
its own, which is marked by <code>[ H1, </code><var>n</var><code>]</code> where <var>n</var> is replaced
with subsequent natural numbers (see section <a href="CHAP005.htm#SECT003">levelsintro</a> for details
about levels). ``H1'' means Hirsch length 1, that is, each subnormal series
of the group contains one and only one infinite cycle. In fact, since
these are subgroups of space groups, it indicates that the translation
subgroup is of dimension 1.
<p>
(Note that by calculating the point groups of these centralizers you can 
in fact see, that the infinite cyclic groups consist of translations only.)
<p>
Take two of these centralizers and calculate the closure by selecting
<code>Closure</code> from the <code>Subgroups</code> menu. You will get a new subgroup
of Hirsch length 2, which is also placed on a level of its own. Next
select three of them, and calculate the closure. What do you observe?
Also, select all four of them and calculate the closure. This time 
you get a subgroup of index 16, hence its level is marked by this finite
index rather than a Hirsch number (which would be 4 here). Note that
the finite index is used rather than the Hirsch length for this placement.
<p>
Finally, check, whether the centralizers are normal in the whole space
group by clicking on the vertices with the right mouse button and
choosing <code>IsNormal</code> in the ``Information'' window, which springs up.
Now form the closures of each of them with each of the size 8 point 
stabilizers. You will get some other subgroups of Hirsch length 1.
Both the centralizers and the point stabilizers are abelian. Is this also
true for the closures?
<p>
This  is now  the end of   our partial investigation  of the (partial)
subgroup lattice  of <i>G</i>, close  the graphic sheet by selecting <code>close
graphic sheet</code> from the <code>Sheet</code> menu.
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP003.htm">Previous</a>] [<a href ="CHAP005.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>XGAP manual<br>February 2024
</address></body></html>